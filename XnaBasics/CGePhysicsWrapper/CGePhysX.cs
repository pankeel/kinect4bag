/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class CGePhysX : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CGePhysX(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(CGePhysX obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~CGePhysX() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CGePhysicsPINVOKE.delete_CGePhysX(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public CGePhysX() : this(CGePhysicsPINVOKE.new_CGePhysX(), true) {
  }

  public void OnInit() {
    CGePhysicsPINVOKE.CGePhysX_OnInit(swigCPtr);
  }

  public void StepPhysX(float stepTime) {
    CGePhysicsPINVOKE.CGePhysX_StepPhysX(swigCPtr, stepTime);
  }

  public void createCloth(string clothName, float clothScale, float[] clothOffset, float[] clothRotate) {
    CGePhysicsPINVOKE.CGePhysX_createCloth__SWIG_0(swigCPtr, clothName, clothScale, clothOffset, clothRotate);
  }

  public void createCloth(string clothName, float clothScale, float[] clothOffset) {
    CGePhysicsPINVOKE.CGePhysX_createCloth__SWIG_1(swigCPtr, clothName, clothScale, clothOffset);
  }

  public void createCloth(string clothName, float clothScale) {
    CGePhysicsPINVOKE.CGePhysX_createCloth__SWIG_2(swigCPtr, clothName, clothScale);
  }

  public void createCloth(string clothName) {
    CGePhysicsPINVOKE.CGePhysX_createCloth__SWIG_3(swigCPtr, clothName);
  }

  public bool addCollisionSpheres(SWIGTYPE_p_std__vectorT_physx__PxVec3_t positions, SWIGTYPE_p_std__vectorT_physx__PxReal_t radius, SWIGTYPE_p_std__vectorT_physx__PxU32_t indexPair) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_addCollisionSpheres__SWIG_0(swigCPtr, SWIGTYPE_p_std__vectorT_physx__PxVec3_t.getCPtr(positions), SWIGTYPE_p_std__vectorT_physx__PxReal_t.getCPtr(radius), SWIGTYPE_p_std__vectorT_physx__PxU32_t.getCPtr(indexPair));
    if (CGePhysicsPINVOKE.SWIGPendingException.Pending) throw CGePhysicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool addCollisionSpheres(int nSpheres, float[] pSpherePos, float[] pSphereRadius, int nIndexPair, int[] pIndexPair) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_addCollisionSpheres__SWIG_1(swigCPtr, nSpheres, pSpherePos, pSphereRadius, nIndexPair, pIndexPair);
    return ret;
  }

  public void updateCollisionSpheres(SWIGTYPE_p_std__vectorT_physx__PxVec3_t positions) {
    CGePhysicsPINVOKE.CGePhysX_updateCollisionSpheres(swigCPtr, SWIGTYPE_p_std__vectorT_physx__PxVec3_t.getCPtr(positions));
    if (CGePhysicsPINVOKE.SWIGPendingException.Pending) throw CGePhysicsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool getClothIndices(SWIGTYPE_p_p_physx__PxU32 indices, SWIGTYPE_p_physx__PxU32 nIndices) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_getClothIndices(swigCPtr, SWIGTYPE_p_p_physx__PxU32.getCPtr(indices), SWIGTYPE_p_physx__PxU32.getCPtr(nIndices));
    if (CGePhysicsPINVOKE.SWIGPendingException.Pending) throw CGePhysicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getClothIndicesCount() {
    int ret = CGePhysicsPINVOKE.CGePhysX_getClothIndicesCount(swigCPtr);
    return ret;
  }

  public bool getClothIndicesContent(int[] indices) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_getClothIndicesContent(swigCPtr, indices);
    return ret;
  }

  public bool getClothParticles(SWIGTYPE_p_physx__PxVec3 particles) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_getClothParticles__SWIG_0(swigCPtr, SWIGTYPE_p_physx__PxVec3.getCPtr(particles));
    return ret;
  }

  public int getClothParticesCount() {
    int ret = CGePhysicsPINVOKE.CGePhysX_getClothParticesCount(swigCPtr);
    return ret;
  }

  public bool getClothParticlesContent(float[] particles) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_getClothParticlesContent(swigCPtr, particles);
    return ret;
  }

  public bool getClothParticles(SWIGTYPE_p_physx__PxVec3 particles, SWIGTYPE_p_physx__PxU32 nParticles) {
    bool ret = CGePhysicsPINVOKE.CGePhysX_getClothParticles__SWIG_1(swigCPtr, SWIGTYPE_p_physx__PxVec3.getCPtr(particles), SWIGTYPE_p_physx__PxU32.getCPtr(nParticles));
    if (CGePhysicsPINVOKE.SWIGPendingException.Pending) throw CGePhysicsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getClothNormalStream(float[] normals) {
    CGePhysicsPINVOKE.CGePhysX_getClothNormalStream(swigCPtr, normals);
  }

  public void getClothTextureStream(float[] textures) {
    CGePhysicsPINVOKE.CGePhysX_getClothTextureStream(swigCPtr, textures);
  }

  public void Destroy() {
    CGePhysicsPINVOKE.CGePhysX_Destroy(swigCPtr);
  }

  public SWIGTYPE_p_physx__PxPhysics getPhysics() {
    IntPtr cPtr = CGePhysicsPINVOKE.CGePhysX_getPhysics(swigCPtr);
    SWIGTYPE_p_physx__PxPhysics ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxPhysics(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_physx__PxScene getScene() {
    IntPtr cPtr = CGePhysicsPINVOKE.CGePhysX_getScene(swigCPtr);
    SWIGTYPE_p_physx__PxScene ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxScene(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_physx__PxCooking getCooking() {
    IntPtr cPtr = CGePhysicsPINVOKE.CGePhysX_getCooking(swigCPtr);
    SWIGTYPE_p_physx__PxCooking ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_physx__PxCooking(cPtr, false);
    return ret;
  }

}
