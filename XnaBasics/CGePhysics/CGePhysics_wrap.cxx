/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_CGePhysics(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_CGePhysics(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_CGePhysics(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "CGePhysX.h"
#include "example.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_CGePhysX() {
  void * jresult ;
  CGePhysX *result = 0 ;
  
  result = (CGePhysX *)new CGePhysX();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CGePhysX(void * jarg1) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_OnInit(void * jarg1) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  (arg1)->OnInit();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_StepPhysX(void * jarg1, float jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  float arg2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->StepPhysX(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_createCloth__SWIG_0(void * jarg1, char * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxReal arg3 ;
  physx::PxVec3 arg4 ;
  physx::PxQuat arg5 ;
  physx::PxReal *argp3 ;
  physx::PxVec3 *argp4 ;
  physx::PxQuat *argp5 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (physx::PxReal *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxReal", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (physx::PxVec3 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxVec3", 0);
    return ;
  }
  arg4 = *argp4; 
  argp5 = (physx::PxQuat *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxQuat", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->createCloth((char const *)arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_createCloth__SWIG_1(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxReal arg3 ;
  physx::PxVec3 arg4 ;
  physx::PxReal *argp3 ;
  physx::PxVec3 *argp4 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (physx::PxReal *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxReal", 0);
    return ;
  }
  arg3 = *argp3; 
  argp4 = (physx::PxVec3 *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxVec3", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->createCloth((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_createCloth__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxReal arg3 ;
  physx::PxReal *argp3 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (physx::PxReal *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxReal", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->createCloth((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_createCloth__SWIG_3(void * jarg1, char * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->createCloth((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGePhysX_addCollisionSpheres(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxVec3 > *arg2 = 0 ;
  vector< physx::PxReal > *arg3 = 0 ;
  vector< physx::PxU32 > *arg4 = 0 ;
  bool result;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (vector< physx::PxVec3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vector< physx::PxVec3 > & type is null", 0);
    return 0;
  } 
  arg3 = (vector< physx::PxReal > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vector< physx::PxReal > & type is null", 0);
    return 0;
  } 
  arg4 = (vector< physx::PxU32 > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vector< physx::PxU32 > & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addCollisionSpheres(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_updateCollisionSpheres(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxVec3 > *arg2 = 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (vector< physx::PxVec3 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "vector< physx::PxVec3 > & type is null", 0);
    return ;
  } 
  (arg1)->updateCollisionSpheres(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGePhysX_getClothIndices(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxU32 **arg2 = 0 ;
  physx::PxU32 *arg3 = 0 ;
  bool result;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (physx::PxU32 **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxU32 *& type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxU32 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxU32 & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->getClothIndices(*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CGePhysX_getClothParticles(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  result = (bool)(arg1)->getClothParticles(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_Destroy(void * jarg1) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  (arg1)->Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mCloth_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxCloth *arg2 = (physx::PxCloth *) 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  arg2 = (physx::PxCloth *)jarg2; 
  if (arg1) (arg1)->mCloth = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mCloth_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxCloth *result = 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  result = (physx::PxCloth *) ((arg1)->mCloth);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothIndices_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > arg2 ;
  vector< physx::PxU32 > *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (vector< physx::PxU32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vector< physx::PxU32 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothIndices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothIndices_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothIndices);
  jresult = new vector< physx::PxU32 >((const vector< physx::PxU32 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothVertices_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxVec3 > arg2 ;
  vector< physx::PxVec3 > *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (vector< physx::PxVec3 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vector< physx::PxVec3 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothVertices = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothVertices_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxVec3 > result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothVertices);
  jresult = new vector< physx::PxVec3 >((const vector< physx::PxVec3 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothCollisionData_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxClothCollisionData arg2 ;
  physx::PxClothCollisionData *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (physx::PxClothCollisionData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxClothCollisionData", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothCollisionData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothCollisionData_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxClothCollisionData result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothCollisionData);
  jresult = new physx::PxClothCollisionData((const physx::PxClothCollisionData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothCollisionSpheres_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxClothCollisionSphere > arg2 ;
  vector< physx::PxClothCollisionSphere > *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (vector< physx::PxClothCollisionSphere > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vector< physx::PxClothCollisionSphere >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothCollisionSpheres = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothCollisionSpheres_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxClothCollisionSphere > result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothCollisionSpheres);
  jresult = new vector< physx::PxClothCollisionSphere >((const vector< physx::PxClothCollisionSphere > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothCollisionSpheresIndexPair_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > arg2 ;
  vector< physx::PxU32 > *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (vector< physx::PxU32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vector< physx::PxU32 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothCollisionSpheresIndexPair = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothCollisionSpheresIndexPair_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothCollisionSpheresIndexPair);
  jresult = new vector< physx::PxU32 >((const vector< physx::PxU32 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mClothCollisionIndexPair_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > arg2 ;
  vector< physx::PxU32 > *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (vector< physx::PxU32 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null vector< physx::PxU32 >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mClothCollisionIndexPair = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mClothCollisionIndexPair_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  vector< physx::PxU32 > result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mClothCollisionIndexPair);
  jresult = new vector< physx::PxU32 >((const vector< physx::PxU32 > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CGePhysX_mCharacterScale_set(void * jarg1, void * jarg2) {
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxReal arg2 ;
  physx::PxReal *argp2 ;
  
  arg1 = (CGePhysX *)jarg1; 
  argp2 = (physx::PxReal *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxReal", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->mCharacterScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_mCharacterScale_get(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxReal result;
  
  arg1 = (CGePhysX *)jarg1; 
  result =  ((arg1)->mCharacterScale);
  jresult = new physx::PxReal((const physx::PxReal &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_getPhysics(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  result = (physx::PxPhysics *)(arg1)->getPhysics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_getScene(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxScene *result = 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  result = (physx::PxScene *)(arg1)->getScene();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CGePhysX_getCooking(void * jarg1) {
  void * jresult ;
  CGePhysX *arg1 = (CGePhysX *) 0 ;
  physx::PxCooking *result = 0 ;
  
  arg1 = (CGePhysX *)jarg1; 
  result = (physx::PxCooking *)(arg1)->getCooking();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Shape(void * jarg1) {
  Shape *arg1 = (Shape *) 0 ;
  
  arg1 = (Shape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_x_set(void * jarg1, double jarg2) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  
  arg1 = (Shape *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Shape_x_get(void * jarg1) {
  double jresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = (Shape *)jarg1; 
  result = (double) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_y_set(void * jarg1, double jarg2) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  
  arg1 = (Shape *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Shape_y_get(void * jarg1) {
  double jresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = (Shape *)jarg1; 
  result = (double) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_move(void * jarg1, double jarg2, double jarg3) {
  Shape *arg1 = (Shape *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (Shape *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->move(arg2,arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Shape_area(void * jarg1) {
  double jresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = (Shape *)jarg1; 
  result = (double)(arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Shape_perimeter(void * jarg1) {
  double jresult ;
  Shape *arg1 = (Shape *) 0 ;
  double result;
  
  arg1 = (Shape *)jarg1; 
  result = (double)(arg1)->perimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Shape_nshapes_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  Shape::nshapes = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Shape_nshapes_get() {
  int jresult ;
  int result;
  
  result = (int)Shape::nshapes;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Circle(double jarg1) {
  void * jresult ;
  double arg1 ;
  Circle *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (Circle *)new Circle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Circle_area(void * jarg1) {
  double jresult ;
  Circle *arg1 = (Circle *) 0 ;
  double result;
  
  arg1 = (Circle *)jarg1; 
  result = (double)(arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Circle_perimeter(void * jarg1) {
  double jresult ;
  Circle *arg1 = (Circle *) 0 ;
  double result;
  
  arg1 = (Circle *)jarg1; 
  result = (double)(arg1)->perimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Circle(void * jarg1) {
  Circle *arg1 = (Circle *) 0 ;
  
  arg1 = (Circle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Square(double jarg1) {
  void * jresult ;
  double arg1 ;
  Square *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (Square *)new Square(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Square_area(void * jarg1) {
  double jresult ;
  Square *arg1 = (Square *) 0 ;
  double result;
  
  arg1 = (Square *)jarg1; 
  result = (double)(arg1)->area();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Square_perimeter(void * jarg1) {
  double jresult ;
  Square *arg1 = (Square *) 0 ;
  double result;
  
  arg1 = (Square *)jarg1; 
  result = (double)(arg1)->perimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Square(void * jarg1) {
  Square *arg1 = (Square *) 0 ;
  
  arg1 = (Square *)jarg1; 
  delete arg1;
}


SWIGEXPORT Shape * SWIGSTDCALL CSharp_Circle_SWIGUpcast(Circle *jarg1) {
    return (Shape *)jarg1;
}

SWIGEXPORT Shape * SWIGSTDCALL CSharp_Square_SWIGUpcast(Square *jarg1) {
    return (Shape *)jarg1;
}

#ifdef __cplusplus
}
#endif

